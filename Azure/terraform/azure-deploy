#!/bin/bash

# Azure IoT Sound Analytics - Quick Deploy Wrapper
# This script provides a simple interface for common deployment tasks

set -e

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEPLOY_SCRIPT="${SCRIPT_DIR}/deploy-azure.sh"
CONFIG_SCRIPT="${SCRIPT_DIR}/config-manager.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Function to print colored output
print_header() {
    echo -e "${PURPLE}================================${NC}"
    echo -e "${PURPLE} Azure IoT Sound Analytics${NC}"
    echo -e "${PURPLE} Quick Deploy Tool${NC}"
    echo -e "${PURPLE}================================${NC}"
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    if [ ! -f "$DEPLOY_SCRIPT" ]; then
        print_error "Deploy script not found: $DEPLOY_SCRIPT"
        exit 1
    fi
    
    if [ ! -f "$CONFIG_SCRIPT" ]; then
        print_error "Config script not found: $CONFIG_SCRIPT"
        exit 1
    fi
    
    if ! command -v az >/dev/null 2>&1; then
        print_error "Azure CLI not found. Please install Azure CLI first."
        exit 1
    fi
    
    if ! command -v terraform >/dev/null 2>&1; then
        print_error "Terraform not found. Please install Terraform first."
        exit 1
    fi
    
    print_success "Prerequisites check passed"
}

# Function to show interactive menu
show_menu() {
    echo ""
    echo "Select an option:"
    echo "1. Quick Deploy (Dev Environment)"
    echo "2. Setup Environment"
    echo "3. Deploy Infrastructure"
    echo "4. Check Status"
    echo "5. View Outputs"
    echo "6. Destroy Resources"
    echo "7. Configuration Manager"
    echo "8. Show Help"
    echo "9. Exit"
    echo ""
    read -p "Enter your choice (1-9): " choice
}

# Function to quick deploy
quick_deploy() {
    print_header
    print_status "Starting quick deployment for development environment..."
    
    # Setup dev environment
    print_status "Setting up development environment..."
    "$CONFIG_SCRIPT" setup dev
    
    # Deploy infrastructure
    print_status "Deploying infrastructure..."
    "$DEPLOY_SCRIPT" deploy
    
    print_success "Quick deployment completed!"
    print_status "Next steps:"
    echo "  - Check deployment status: $0 status"
    echo "  - View outputs: $0 outputs"
    echo "  - Access Azure Portal: https://portal.azure.com"
}

# Function to setup environment
setup_environment() {
    print_header
    echo "Available environments:"
    echo "1. Development (dev)"
    echo "2. Staging (staging)"
    echo "3. Production (prod)"
    echo ""
    read -p "Select environment (1-3): " env_choice
    
    case $env_choice in
        1) env="dev" ;;
        2) env="staging" ;;
        3) env="prod" ;;
        *) print_error "Invalid choice"; exit 1 ;;
    esac
    
    print_status "Setting up $env environment..."
    "$CONFIG_SCRIPT" setup "$env"
    print_success "Environment setup completed!"
}

# Function to deploy infrastructure
deploy_infrastructure() {
    print_header
    print_status "Deploying infrastructure..."
    "$DEPLOY_SCRIPT" deploy
    print_success "Deployment completed!"
}

# Function to check status
check_status() {
    print_header
    print_status "Checking deployment status..."
    "$DEPLOY_SCRIPT" status
}

# Function to view outputs
view_outputs() {
    print_header
    print_status "Retrieving deployment outputs..."
    "$DEPLOY_SCRIPT" outputs
}

# Function to destroy resources
destroy_resources() {
    print_header
    print_error "WARNING: This will destroy ALL resources!"
    read -p "Are you sure? Type 'yes' to confirm: " confirm
    
    if [ "$confirm" = "yes" ]; then
        print_status "Destroying resources..."
        "$DEPLOY_SCRIPT" destroy
        print_success "Resources destroyed!"
    else
        print_status "Destroy cancelled"
    fi
}

# Function to show configuration manager
show_config_manager() {
    print_header
    echo "Configuration Manager Options:"
    echo "1. Create new environment"
    echo "2. List environments"
    echo "3. Switch environment"
    echo "4. Backup configuration"
    echo "5. Validate configuration"
    echo "6. Generate passwords"
    echo ""
    read -p "Select option (1-6): " config_choice
    
    case $config_choice in
        1)
            read -p "Enter environment name (dev/staging/prod): " env_name
            "$CONFIG_SCRIPT" create "$env_name"
            ;;
        2)
            "$CONFIG_SCRIPT" list
            ;;
        3)
            read -p "Enter environment name: " env_name
            "$CONFIG_SCRIPT" switch "$env_name"
            ;;
        4)
            read -p "Enter environment name: " env_name
            "$CONFIG_SCRIPT" backup "$env_name"
            ;;
        5)
            read -p "Enter config file path: " config_file
            "$CONFIG_SCRIPT" validate "$config_file"
            ;;
        6)
            "$CONFIG_SCRIPT" generate-passwords
            ;;
        *)
            print_error "Invalid choice"
            ;;
    esac
}

# Function to show help
show_help() {
    print_header
    echo "Azure IoT Sound Analytics - Quick Deploy Tool"
    echo ""
    echo "This tool provides an easy way to deploy and manage your Azure infrastructure."
    echo ""
    echo "Quick Start:"
    echo "  $0 quick-deploy    # Deploy development environment"
    echo "  $0 setup          # Setup specific environment"
    echo "  $0 deploy         # Deploy infrastructure"
    echo "  $0 status         # Check deployment status"
    echo ""
    echo "Advanced Usage:"
    echo "  $0 config         # Configuration manager"
    echo "  $0 destroy        # Destroy resources"
    echo "  $0 outputs        # View deployment outputs"
    echo ""
    echo "For detailed documentation, see README-DEPLOYMENT.md"
}

# Function to handle command line arguments
handle_arguments() {
    case "${1:-menu}" in
        "quick-deploy")
            check_prerequisites
            quick_deploy
            ;;
        "setup")
            check_prerequisites
            setup_environment
            ;;
        "deploy")
            check_prerequisites
            deploy_infrastructure
            ;;
        "status")
            check_status
            ;;
        "outputs")
            view_outputs
            ;;
        "destroy")
            check_prerequisites
            destroy_resources
            ;;
        "config")
            show_config_manager
            ;;
        "help")
            show_help
            ;;
        "menu")
            # Interactive mode
            while true; do
                show_menu
                case $choice in
                    1) check_prerequisites; quick_deploy; break ;;
                    2) check_prerequisites; setup_environment; break ;;
                    3) check_prerequisites; deploy_infrastructure; break ;;
                    4) check_status; break ;;
                    5) view_outputs; break ;;
                    6) check_prerequisites; destroy_resources; break ;;
                    7) show_config_manager; break ;;
                    8) show_help; break ;;
                    9) print_status "Goodbye!"; exit 0 ;;
                    *) print_error "Invalid choice. Please try again." ;;
                esac
            done
            ;;
        *)
            print_error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

# Main execution
main() {
    print_header
    handle_arguments "$@"
}

# Run main function with all arguments
main "$@"
